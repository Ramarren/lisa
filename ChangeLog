2002-08-06    <de.young@computer.org>

	Bugfix release 1.3.1:

	* Fixed significant bug in LISA's support for class hierarchy
	reasoning. Thanks to Paul Werkowski for finding and reporting it.

	* Removed CLOCC PORT module from LISA source repository. Those
	portions of PORT used by LISA are now represented within LISA
	source files.

	* Removed ZEBU distribution from LISA source repository. Should
	have never been there in the first place.

	* Added IMPLEMENTATIONS directory to
	archive. Implementation-dependent workarounds are put here.

	* The WATCH facility now prints to *TRACE-OUTPUT* rather than
	standard output. Thanks to Paul W. for that suggestion.

2002-07-22    <de.young@computer.org>

	LISA official release 1.3. See the previous log entry for details.

2002-06-03    <de.young@computer.org>

	LISA snapshot release 1.3a. First time for an official CVS-only
	release; these snapshots are intended as sneak previews of
	upcoming official versions. Many changes and enhancements:

	* Internal fact representation: I've merged the CLOS and template
	representations of facts into a single model. Gone are
	SHADOW-FACTS and separate methods of handling DEFTEMPLATE and
	DEFIMPORT facts. A unified view is now in place. The immediate
	ramifications are 1) queries now function with both types of
	facts, as LISA creates a class representing each template and
	instantiates it for each fact; 2) the ASSERT macro can be used
	with DEFIMPORTS, in addition to the traditional
	ASSERT-INSTANCE. Point (2) was a surprising side-effect; I hadn't
	anticipated this.

	* DEFTEMPLATE changes: Addition of the DEFAULT modifier to slot
	specifications. It's now possible to write something like:

	  (deftemplate frodo ()
	    (slot name (default frodo)))

	* DEFIMPORT changes: DEFIMPORT has been completely rewritten and
	simplified. The new specification is:

	  (defimport classname &key (use-inheritancep t))

	By default, LISA makes available all slots and all classes in the
	hierarchy. If USE-INHERITANCEP is NIL, only the immediate slots
	are available and the hierarchy is not considered during pattern
	matching. This change will break existing code, but I believe the
	simplified interface is much improved and makes better sense.

	* Query changes: Addition of WITH-SIMPLE-QUERY macro.

	* Environment changes: Paul Werkowski submitted this nice
	enhancement that creates a package (LISA-LISP) containing all of
	LISA's exported symbols plus those from COMMON-LISP. Now one can
	write:

	  (defpackage "LISA-MAB"
	    (:use "LISA-LISP"))

	  (in-package "LISA-MAB")

	rather than having to work in LISA-USER all the time.

	* Documentation: The code base is being completely
	documented. I've only done a handful of files but work is 
	proceeding. A tedious but necessary task, and it is reacquainting
	me with aspects of LISA that have been stable for over a year.

	* MP support: I've removed most MP synchronization code from LISA,
	placing the burden of multi-thread access on the developer (for
	now). My current approach to MP is not the way it should be 
	done. This doesn't mean LISA won't be re-entrant; multiple threads
	may be in LISA as long as each thread is operating on a different
	inference engine instance. However, if an application has several
	threads that operate concurrently within THE SAME engine then the
	application must manage synchronization. No more than one thread
	may be running within the same engine at any one time. To assist
	developers here, the macro WITH-INFERENCE-ENGINE will remain, and
	I'll also export a special variable, representing the "active
	inference engine", that may be let-bound. In the future, I might
	employ the concept of multiple working memories; i.e. each thread
	would own its working memory and thus multiple threads could be
	running concurrently within the same engine. This will need
	exploration.

2002-04-16    <de.young@computer.org>

	LISA release 1.2. Support for a simple but functional query
	language; updated included PORT to latest release.

2001-10-03    <de.young@computer.org>

	LISA release 1.1. Support for dynamic rule definition; small
	additions to the programming interface; additions to
	documentation.

2001-08-31    <de.young@computer.org>

	LISA's first production release, Version 1.0. Support for rule
	redefinition regardless of inference engine state; augmented
	documentation; enhancements to web page.

2001-07-20    <de.young@computer.org>

	Fourth Beta release. Addition of DEFFACTS macro and associated
	documentation.

2001-06-28    <de.young@computer.org>

	Third Beta release. Enhancements to the system definition file
	suggested by Paul Werkowski: LISA creates the binary directory
	hierarchy for all supported implementations, if necessary; other
	minor changes. Addressed implementation differences in
	ENSURE-CLASS. Updated PORT. Tested LISA with Windows versions of
	ACL, LispWorks and CLISP 2.26.

2001-05-31  David E. Young  <de.young@computer.org>

	Second Beta release. Includes a fix to the Rete compiler resulting
	from a bug reported by Art Nuzzo; object ancestry reasoning;
	updated Reference Guide.

2001-05-22  David E. Young  <de.young@computer.org>

	First official Beta release. This distribution adds a reasonable
	LISA Reference Guide that should do a better job of documentation
	than what previously existed. Some small code improvements.

2001-05-10  David E. Young  <de.young@computer.org>

	Fairly comprehensive multi-processing (thread) support. It should
	now be possible to 1) run multiple inference engines within a Lisp
	world; and 2) have multiple threads access a single inference
	engine. Included with this support is a sample application that
	serves as a decent example; see "lisa:misc;pumps.lisp". This
	application has been tested with the three MP-capable Lisp
	implementations that LISA supports (ACL, LispWorks, CMUCL).

	Syntax change to the DEFTEMPLATE macro in preparation for possible
	future extensions. The proper form is now:

	  (deftemplate ()
	    (slot ...)
	    (...))

2001-04-25  David E. Young  <de.young@computer.org>

	LISA's last alpha release (0.8.2), and the birth of this
	ChangeLog. Latest features include full CLOS reasoning support;
	the TEST conditional element; support for arbitrary list
	constructs within facts and patterns.
	

