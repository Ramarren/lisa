; -*- mode:     CL -*- ----------------------------------------------------- ;
; File:         sb-tr.zb
; Description:  simple test of sb trace subgrammar
; Author:       Joachim H. Laubsch
; Created:       3-Sep-93
; Modified:     Thu Oct  2 12:57:28 1997 (Joachim H. Laubsch)
; Language:     CL
; Package:      USER
; Status:       Experimental (Do Not Distribute) 
; RCS $Header: /home/ramarren/LISP/git-repos/lisa-tmp/lisa/contrib/zebu-3.5.5/test/Attic/sb-tr.zb,v 1.1 2000/10/12 02:39:45 youngde Exp $
;
; (c) Copyright 1993, Hewlett-Packard Company
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Revisions:
; RCS $Log: sb-tr.zb,v $
; RCS Revision 1.1  2000/10/12 02:39:45  youngde
; RCS Added Zebu as contrib; initial class files; initial grammar
; RCS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(:name "sb-tr"
 :package "CL-USER"
 :string-delimiter #\"
 :identifier-start-chars
 "_-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"
 :identifier-continue-chars
 "/$-+_.:abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"
 :intern-identifier nil
 :case-sensitive t
 :lex-cats ((Hex "0x[0-9a-f]+")
	    (Int "-?[0-9]+")
	    (Quotation-Rx "'[^']+'")
	    (Resource-attr "([0-9]+,[0-9]+,[0-9]+)")
	    ))

;; rules

(defrule Mapping_trace
   := ("Compute" Identifier.0 "mapping for" Identifier.1 List PCM-Component "...")
   
   := ("Seed instance:" PCM-Class_Component)

   := PCM-Class_Component 

   := (PCM-Class_Component List) 

   := Option_instance
   )

(defrule Option_instance
    := ("Instance" Hex "of Option [required]")

    := ("Instance" Hex "of Option" "[" Identifier "]")
    )

(defrule Product_Id
	:= (Token-Seq Hex)
	:= Identifier)

(defrule PCM-Component
 	:= ( "[" Identifier Hex "]")
	)

(defrule PCM-Class_Component
 	:= (Product_Id "[" Identifier "]")

 	:= (Product_Id "{" Token-Seq "}")

	:= Product_Id
	)

(defrule List
    := ( "(" Token-Seq ")" )
    )

(defrule Token-Seq
    := Token

    := (Token Token-Seq)
    )

(defrule Token
    := Int

    := Identifier)

#||
(set-working-directory *ZEBU-test-directory*)
(let ((*warn-conflicts* t))
  (compile-slr-grammar "sb-tr.zb"))
(zb:zebu-load-file "sb-tr.tab")

(zb:read-parser "dummy_os 0x41167300" :grammar (find-grammar "sb-tr"))
(zb:read-parser "dummy_os 0x41167300 [Dummy_OS]"
		:grammar (find-grammar "sb-tr"))
(zb:read-parser "dummy_os 0x41167300 {Dummy OS}"
		:grammar (find-grammar "sb-tr"))
(zb:read-parser "999.0 HP-UX 0x41167398 {HP-UX 9.0} (reference)"
		:grammar (find-grammar "sb-tr"))
(let ((*warn-conflicts* t))
  (compile-lalr1-grammar "sb-tr.zb" :output-file "/tmp/sb-tr-lalr1.tab"))
(zb:zebu-load-file "/tmp/sb-tr-lalr1.tab")


||#
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                               End of sb-tr.zb
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
