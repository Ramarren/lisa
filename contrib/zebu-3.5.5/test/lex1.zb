; -*- mode:     CL -*- ----------------------------------------------------- ;
; File:         lex1.zb
; Description:  Zebu Grammar: Simple Expressions
; Author:       Joachim H. Laubsch
; Language:     CL
; Status:       Experimental (Do Not Distribute) 
; RCS $Header: /home/ramarren/LISP/git-repos/lisa-tmp/lisa/contrib/zebu-3.5.5/test/Attic/lex1.zb,v 1.1 2000/10/12 02:39:45 youngde Exp $
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(:name "lex1"
 :package "CL-USER"
 :grammar "zebu-mg"
 :identifier-start-chars
 "-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
 :identifier-continue-chars
 "$-_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"
 )

;; Domain definition

Program :=     [(-stmts kb-sequence)];
Combination := [(-function) (-arg)];
Quantity :=    [(-dim) (-val)];
Dimension :=   [(-val)];

;; rules

Program  --> "begin" Stmt+ " " "end"
             { Program: [(-stmts Stmt+)] } ;

Stmt     --> Identifier | Quantity | Appl | Program ;

Appl     --> Identifier "(" Arg* " " ")"
              {Combination: [(-function Identifier) (-arg Arg*)]};

Arg      --> Identifier | Number | Appl | Quantity ;

Quantity --> "<" Dimension "." Number ">"
             {Quantity: [(-dim Dimension) (-val Number)]};

Dimension --> "#" Identifier
              {Dimension: [(-val Identifier)]} ;

#||
(set-working-directory *ZEBU-test-directory*)
(let ((*load-verbose* t))
  (zb:compile-slr-grammar "lex1.zb"
		       :output-file (merge-pathnames
				     "binary/lex1.tab"
				     *ZEBU-test-directory*)
		       :verbose t))
(setq zebu:*current-grammar*
      (zebu-load-file (merge-pathnames
		       "binary/lex1.tab" *ZEBU-test-directory*)
		      :verbose t))

(zb::read-parser "begin <#k . 1> end")
(zb::read-parser "begin <#k . .1> end")
(zb::read-parser "begin <#K . 2.1> end")

(zebu::print-collection t)
(zb::cruise-first-sets)
(zb::cruise-follow-sets)
(zebu::print-productions)
(zebu::print-actions "lex1")

(zb::read-parser "begin A end")
(zb::read-parser "begin A B C end")
(zb::read-parser "begin A begin B1 B2 end C end")
(zb::read-parser "begin f() end")
(zb::read-parser "begin f(a) end")
(zb::read-parser "begin f(1) end")
(zb::read-parser "begin A f(1) end")
(zb::read-parser "begin f(1 2) end")
(zb::read-parser "begin f(1) A end")
(zb::read-parser "begin f(g(a)) A end")
||#
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                             End of lex1.zb
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
