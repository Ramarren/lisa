; -*- mode:     CL -*- ----------------------------------------------------- ;
; File:         mini-la.zb
; Description:  Zebu Grammar: Simple Expressions
; Author:       Joachim H. Laubsch
; Language:     CL
; Status:       Experimental (Do Not Distribute) 
; RCS $Header: /home/ramarren/LISP/git-repos/lisa-tmp/lisa/contrib/zebu-3.5.5/win/test/Attic/mini-la.zb,v 1.1 2000/10/17 18:03:34 youngde Exp $
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(:name "mini-la"
 :domain-file "minl-dom"
 :package "CL-USER"
 :grammar "zebu-mg"
 :identifier-start-chars
 "-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
 :identifier-continue-chars
 "$-_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"
 )

;; Domain definition

Program     := [(-stmts kb-sequence)];
Combination := [(-function) (-args kb-sequence)];
Tuple       := [(-members kb-sequence)];
Za-Set      := [(-members Za-Set-Part)];
Za-Set-Part := Za-List:[(-arg)(-nextargs)];

;; Rules

Program --> "begin" Stmt+ ";" "end"
             { Program: [(-stmts Stmt+)] } ;

Stmt    --> Identifier | Appl | Program ;

Appl    --> Identifier "(" Arg* "," ")"
             {Combination: [(-function Identifier) (-args Arg*)]};

Arg     --> Identifier | Number | Appl | Tuple | Set ;

Tuple   --> "<" Arg+ " " ">" 
            { Tuple: [(-members Arg+)] };

Set     --> "{" Set-Arg-Seq "}" { Za-Set: [(-members Set-Arg-Seq)]};  
      
Set-Arg-Seq -->
        List-Arg "," Set-Arg-Seq
        {Za-Set-Part:[(-arg List-Arg)
                      (-nextargs Set-Arg-Seq)]} |
        List-Arg
        {Za-Set-Part:[(-arg List-Arg)]};     

List-Arg --> Arg;

#||
(set-working-directory *ZEBU-test-directory*)
(let ((*load-verbose* t))
  (zb:compile-slr-grammar "mini-la.zb"
		       :output-file (merge-pathnames
				     "binary/mini-la.tab"
				     *ZEBU-test-directory*)))
(setq zebu:*current-grammar*
      (zebu-load-file (merge-pathnames
		       "binary/mini-la.tab" *ZEBU-test-directory*)))

(zebu::print-collection t)
(zb::cruise-first-sets)
(zb::cruise-follow-sets)
(zebu::print-productions)
(zebu::print-actions  "mini-la")

(zb::read-parser "begin A; B ; C end")
(zb::read-parser "begin A; begin B1; B2 end ; C end")
(zb::read-parser "begin f() end")
(zb::read-parser "begin f(a) end")
(zb::read-parser "begin f(1) end")
(zb::read-parser "begin A; f(1) end")
(zb::read-parser "begin f(1,2) end")
(zb::read-parser "begin f(1,2,g(3,4,5)) end")
(zb::read-parser "begin f(1); A end")
(zb::read-parser "begin f(g(a)); A end")
(zb::read-parser "begin f(g(a));  A; f(1,2,g(3,4,5)) end")
(zb::read-parser "begin end(begin) end")
(zb::read-parser "begin end() end")
(zb::read-parser "begin a(&&) end; ")
||#
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                             End of mini-la.zb
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
