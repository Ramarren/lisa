; -*- mode:     CL -*- ----------------------------------------------------- ;
; File:         arith.zb
; Description:  Grammar 4.19 from Dragon, p. 222
; Author:       Joachim H. Laubsch
; Created:       8-Apr-92
; Modified:     Thu Oct  2 13:02:08 1997 (Joachim H. Laubsch)
; Language:     CL
; Package:      CL-USER
; Status:       Experimental (Do Not Distribute) 
; RCS $Header: /home/ramarren/LISP/git-repos/lisa-tmp/lisa/contrib/zebu-3.5.5/win/test/Attic/arith.zb,v 1.1 2000/10/17 18:03:33 youngde Exp $
;
; (c) Copyright 1992, Hewlett-Packard Company
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Revisions:
; RCS $Log: arith.zb,v $
; RCS Revision 1.1  2000/10/17 18:03:33  youngde
; RCS Returned Windows-specific stuff to Zebu
; RCS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(:name "arith"
 :package "CL-USER"
 :grammar "zebu-mg"
 :identifier-continue-chars
 "$-+*&_.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"
 :domain-file "ar-dom")

;; Domain definition

Arith-exp := Kb-domain: [];
Factor    := Arith-exp: [(-value)] <<print-function: Print-factor>>;
Mult-op   := Arith-exp: [(-arg1) (-arg2)];
Plus-op   := Arith-exp: [(-arg1) (-arg2)];

;; Productions

EE -->  EE "+" TT { Plus-op: [(-arg1 EE) (-arg2 TT)] }
        |  TT ;

TT --> TT "*" F   { Mult-op: [(-arg1 TT) (-arg2 F)] }
       | F ;

F -->  "(" EE ")"        { factor: [(-value EE)] }
       | IDENTIFIER      { factor: [(-value IDENTIFIER)] }
       | NUMBER          { factor: [(-value NUMBER)] } ;
  
#||

(read-parser "EE -->  EE \"+\" TT { Plus-op: [(-arg1 EE) (-arg2 TT)] }
        |  TT ;" :grammar (find-grammar "zebu-mg"))

(zb:compile-slr-grammar (merge-pathnames "arith.zb" *ZEBU-test-directory*)
			:output-file (merge-pathnames
				      "binary/arith.tab" *ZEBU-test-directory*)
			:grammar (find-grammar "zebu-mg"))

(zb:zebu-load-file (merge-pathnames "binary/arith.tab" *ZEBU-test-directory*))
(zebu::print-actions "arith")

(defun print-factor (item stream level)
  (declare (ignore level))
  (let ((v (factor--value item)))
    (if (or (symbolp v) (numberp v))
	(format stream "~a" v)
      (format stream "(~a)" v))))

(equalp (list-parser '(ned "+" jed) :grammar (zb:find-grammar "arith"))
	(read-parser "ned + jed" :grammar (zb:find-grammar "arith")))

(equalp (read-parser "(ned + jed) * 4" :grammar (zb:find-grammar "arith"))
	'#S(Mult-op
	    -ARG1 #S(FACTOR
		     -VALUE #S(PLUS-OP -ARG1 #S(FACTOR -VALUE NED)
				       -ARG2 #S(FACTOR -VALUE JED)))
	    -ARG2 #S(FACTOR -VALUE 4)))


||#

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                End of arith.zb
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
