; -*- mode:     Lisp -*- --------------------------------------------------- ;
; File:         avm.zb
; Description:  typed attribute-value language
; Author:       Joachim H. Laubsch
; Created:      13-Apr-92
; Modified:     Thu Oct  2 12:50:10 1997 (Joachim H. Laubsch)
; Language:     Lisp
; Package:      CL-USER
; Status:       Experimental (Do Not Distribute) 
; RCS $Header: /home/ramarren/LISP/git-repos/lisa-tmp/lisa/contrib/zebu-3.5.5/win/test/Attic/avm.zb,v 1.1 2000/10/17 18:03:33 youngde Exp $
;
; (c) Copyright 1992, Hewlett-Packard Company
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Revisions:
; RCS $Log: avm.zb,v $
; RCS Revision 1.1  2000/10/17 18:03:33  youngde
; RCS Returned Windows-specific stuff to Zebu
; RCS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(:name "avm"
 :grammar "null-grammar"
 :package "CL-USER"
 :identifier-continue-chars
 "$-_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"
 )

;; Domain definition

(defstruct (avm (:include kb-domain)))

(defstruct (Feat-Term (:include avm))
  -type -slots)
(defstruct (Label-value-pair (:include avm))
  -label -value)
(defstruct (general-var (:include avm))
  -name)
(defstruct (tagged-term (:include avm))
  -term -tag)
		      
;; Productions

(defrule Feat-Term
  := General-Var
  := Untagged-Term
  := Tagged-Term
  )

(defrule Tagged-Term
  := ( General-Var "=" Untagged-Term )
  :build (:type Tagged-Term
          :map ((General-Var   . :-tag)
		(Untagged-Term . :-term))))

(defrule Untagged-Term
  := Pos-Untagged-Term
  )

(defrule Pos-Untagged-Term
  :=     Identifier

  :=     ( "type:" Identifier Conj )
  :build (:type Feat-Term
	  :map  ((Conj       . :-slots)
		 (Identifier . :-type)))
  :=     Conj
  :build (:type Feat-Term
	  :map  ((Conj       . :-slots)))
  )

(defrule Conj
  :=     ( "[" Label-value-pairs "]" )
  :build (:form Label-value-pairs))

(defrule Label-value-pair
  :=     ( "(" Identifier Feat-Term ")" )
  :build (:type Label-value-pair
          :map ((Identifier       . :-label)
		(Feat-Term        . :-value))))

(defrule Label-value-pairs
  :=      ()
  
  :=      ( Label-value-pair Label-value-pairs )
  :build  cons
  )

(defrule General-Var
  := ( "%" Number )
  :build (:type General-Var
	  :map  ((Number . :-name))) )

#||
(let ((*default-pathname-defaults* *ZEBU-TEST-DIRECTORY*))
  (zb:zebu-compile-file "avm.zb"
			:output-file (merge-pathnames
				      "avm.tab" *ZEBU-TEST-BINARY-DIRECTORY*))
  
  (load "avm-p"))

||#
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                End of avm.zb
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
