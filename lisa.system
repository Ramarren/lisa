;;; This file is part of LISA, the Lisp-based Intelligent Software
;;; Agents platform.

;;; Copyright (C) 2000 David E. Young (de.young@computer.org)

;;; This library is free software; you can redistribute it and/or
;;; modify it under the terms of the GNU Lesser General Public License
;;; as published by the Free Software Foundation; either version 2.1
;;; of the License, or (at your option) any later version.

;;; This library is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU Lesser General Public License for more details.

;;; You should have received a copy of the GNU Lesser General Public License
;;; along with this library; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

;;; File: defsys.lisp
;;; Description: System definition file for LISA project.
;;;
;;; $Id: lisa.system,v 1.29 2003/03/28 18:55:09 youngde Exp $

(in-package "CL-USER")

(defvar *lisa-root-pathname*
    (make-pathname :directory
                   (pathname-directory *load-truename*)
                   :host (pathname-host *load-truename*)
                   :device (pathname-device *load-truename*)))

(defun make-lisa-path (relative-path)
  (concatenate 'string (namestring *lisa-root-pathname*)
               relative-path))

(setf (logical-pathname-translations "lisa")
  `(("src;**;" ,(make-lisa-path "src/**/"))
    ("lib;**;*.*" ,(make-lisa-path "lib/**/"))
    ("config;*.*" ,(make-lisa-path "config/"))
    ("debugger;*.*" ,(make-lisa-path "src/debugger/"))
    ("contrib;**;" ,(make-lisa-path "contrib/**/"))))

(defvar *lisa-source-pathname*
  (translate-logical-pathname "lisa:src;"))

(defvar *lisa-binary-pathname*
  #+Allegro
  (translate-logical-pathname "lisa:lib;acl;")
  #+LispWorks
  (translate-logical-pathname "lisa:lib;lispworks;")
  #+CMU
  (translate-logical-pathname "lisa:lib;cmucl;")
  #+CLISP
  (translate-logical-pathname "lisa:lib;clisp;")
  #-(or Allegro LispWorks CMU CLISP)
  (error "Unsupported implementation."))

(defun lisa-debugger ()
  (translate-logical-pathname "lisa:debugger;lisa-debugger.lisp"))

;;; Sets up the environment so folks can use the non-portable form of REQUIRE
;;; with some implementations...

#+Allegro
(setf system:*require-search-list*
  (append system:*require-search-list*
          `(:newest ,(lisa-debugger))))

#+clisp
(setf custom:*load-paths*
  (append custom:*load-paths* `(,(lisa-debugger))))

#+LispWorks
(let ((loadable-modules `(("lisa-debugger" . ,(lisa-debugger)))))

  (defadvice (require lisa-require :around)
      (module-name &optional pathname)
    (flet ((lisa-requre ()
             (let ((lisa-module
                    (find module-name loadable-modules
                          :test #'string=
                          :key #'car)))
               (if (null lisa-module)
                   (call-next-advice module-name pathname)
                 (call-next-advice module-name (cdr lisa-module))))))
      (lisa-require module-name pathname))))

;;; Make sure the binary directory structure exists...

(let ((lisa-binary-directories
       '("engine" "core20" "packages" "reflect" "utils" "implementations"
         "rete-compiler" "debugger" "config"))
      (lisa-supported-lisps
       '("acl" "lispworks" "cmucl" "clisp")))
  (dolist (lisp lisa-supported-lisps)
    (dolist (dir lisa-binary-directories)
      (let ((pathname
             (translate-logical-pathname
              (concatenate 'string "lisa:lib;" lisp ";" dir ";"))))
        (ensure-directories-exist pathname)))))

(mk:defsystem :lisa
    :source-pathname *lisa-source-pathname*
    :binary-pathname *lisa-binary-pathname*
    :source-extension "lisp"
    :components ((:module "packages"
                          :source-pathname "packages"
                          :binary-pathname "packages"
                          :components 
                          ((:file "pkgdecl")))
                 (:module "implementations"
                          :source-pathname "implementations"
                          :binary-pathname "implementations"
                          :components
                          ((:file "workarounds")
                           #+Allegro
                           (:file "allegro-auto-notify")
                           #+Lispworks
                           (:file "lispworks-auto-notify"))
                          :depends-on (preamble))
                 (:module "utils"
                          :source-pathname "utils"
                          :binary-pathname "utils"
                          :components ((:file "compose")
                                       (:file "utils"))
                          :depends-on (packages))
                 (:module "reflect"
                          :source-pathname "reflect"
                          :binary-pathname "reflect"
                          :components
                          ((:file "reflect"))
                          :depends-on (utils))
                 (:module "preamble"
                          :source-pathname "2.0-core"
                          :binary-pathname "core20"
                          :components ((:file "preamble")
                                       (:file "conditions"))
                          :depends-on (packages))
                 (:module "core20"
                          :source-pathname "2.0-core"
                          :binary-pathname "core20"
                          :components ((:file "deffacts")
                                       (:file "fact")
                                       (:file "watches")
                                       (:file "activation")
                                       (:file "strategies")
                                       (:file "context")
                                       (:file "rule")
                                       (:file "tms-support")
                                       (:file "rete"
                                              :depends-on (language tms-support))
                                       (:file "meta")
                                       (:file "binding")
                                       (:file "pattern")
                                       (:file "token")
                                       (:file "parser"
                                              :depends-on (pattern))
                                       (:file "language"
                                              :depends-on (parser))
                                       (:file "retrieve"))
                          :depends-on (packages reflect utils preamble))
                 (:module "rete compiler"
                          :source-pathname "rete/reference"
                          :binary-pathname "rete-compiler"
                          :components
                          ((:file "node-tests")
                           (:file "shared-node")
                           (:file "successor")
                           (:file "node-pair")
                           (:file "terminal-node")
                           (:file "node1")
                           (:file "join-node")
                           (:file "node2")
                           (:file "node2-not")
                           (:file "node2-test")
                           (:file "node2-exists")
                           (:file "rete-compiler")
                           (:file "tms" :depends-on (join-node))
                           (:file "network-ops")
                           (:file "network-crawler"))
                          :depends-on
                          (core20))
                 (:module "debugger"
                          :source-pathname "debugger"
                          :binary-pathname "debugger"
                          :compile-only t
                          #|:components ((:file "debugger"))|#
                          :depends-on (core20))
                 (:module "configuration"
                          :source-pathname "config"
                          :binary-pathname "config"
                          :components ((:file "config"))
                          :depends-on (core20))
                 (:module "epilogue"
                          :source-pathname "2.0-core"
                          :binary-pathname "core20"
                          :components
                          ((:file "epilogue"))
                          :depends-on (configuration))
                 #+lisa-rpc
                 (:module "aclrpc"
                          :source-pathname "implementations"
                          :binary-pathname "implementations"
                          :components
                          ((:file "aclrpc-support"))
                          :depends-on (epilogue)))
    :finally-do
    (progn
      (mk:system-source-size :lisa :all)
      (mk:system-source-size :lisa :new-source-and-dependents)))

(defmacro with-quiet-compile (&body body)
  `(let ((*compile-print* nil))
     (with-compilation-unit ()
       ,@body)))

(defun compile-lisa ()
  (with-quiet-compile
      (mk:compile-system :lisa)))

(defun load-lisa ()
  (with-quiet-compile
      (mk:load-system :lisa)))

(defun clean-lisa ()
  (mk:clean-system :lisa))
