;; -*- mode: Lisp -*-
;;
;; File: defrule.zb
;; Description: Zebu grammar for the LISA programming language.
;;

(:name "lisa"
       :domain-file "defrule-domain"
       :grammar "null-grammar"
       :package "LISA"
       :identifier-continue-chars
       "$-_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"
       :identifier-start-chars
       "$-_<>=+*/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
       :lex-cats ((varname
                   "\\?[a-z,A-Z,_]+[a-z,A-Z,0-9,_]*")
                  (anonymous-varname
                   "\\?"))
;;                  (function-name
;;                   "[<,>,=,+,\-,\*,/,_,a-z,A-Z,0-9]+"))
       )

(defrule defrule
    := ("(" "defrule" name
         comment
         declaration-list
         left-hand-side
         "=>"
         right-hand-side
         ")"))

(defrule comment
    := ()
    := string
    )

(defrule declaration-list
    := ()
    := ("(declare" declaration ")")
    )

(defrule declaration
    := ("(salience" number ")")
    )

(defrule left-hand-side
    := pattern-list
    )

(defrule right-hand-side
    := action-list
    )

(defrule action-list
    := ()
    := (action action-list)
    )

(defrule action
    := sexp
    )

(defrule pattern-list
    := ()
    := (pattern pattern-list)
    := ("(" variable-name pattern ")" pattern-list)
    )

(defrule pattern
    := test-pattern
    := ordered-fact
    := unordered-fact
    := (name pattern)
    )

(defrule ordered-fact
    := ("(" name constraint-list ")")
    )

(defrule constraint-list
    := ()
    := (constraint constraint-list)
    )

(defrule constraint
    := constant
    := (constant constraint-condition)
    := single-field-variable
    := (single-field-variable constraint-condition)
    )

(defrule constraint-condition
    := sexp
    := constant
    )

(defrule unordered-fact
    := ("(" name slot-list ")")
    )

(defrule slot-list
    := ()
    := (slot slot-list)
    )

(defrule slot
    := ("(" name ")")
    := ("(" name constraint ")")
    )

(defrule test-pattern
    := ("(" "test" sexp ")")
    )

(defrule sexp
    := ("(" name lambda-list ")")
    := ("(" sexp ")")
    )

(defrule lambda-list
    := ()
    := param
    := (param lambda-list)
    )

(defrule param
    := constant
    := variable-name
    := sexp
    )

(defrule single-field-variable
    := variable-name
    := anonymous-variable-name
    )

(defrule variable-name
    := varname

    )

(defrule anonymous-variable-name
    := anonymous-varname
    )

(defrule name
    := identifier
    )

(defrule constant
    := name
    := string
    := number
    )
