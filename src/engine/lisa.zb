;; -*- mode: Lisp -*-
;;
;; File: defrule.zb
;; Description: Zebu grammar for the LISA programming language.
;;

(:name "lisa"
       :domain-file "defrule-domain"
       :grammar "null-grammar"
       :package "LISA"
       :identifier-continue-chars
       "$-_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"
       :identifier-start-chars
       "$-_<>=+*/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
       :lex-cats ((varname
                   "\\?[a-z,A-Z,_]+[a-z,A-Z,0-9,_]*")
                  (anonymous-varname
                   "\\?"))
;;                  (function-name
;;                   "[<,>,=,+,\-,\*,/,_,a-z,A-Z,0-9]+"))
       )

(defrule defrule
    := ("(" "defrule" name
         comment
         declaration-list
         left-hand-side
         "=>"
         right-hand-side
         ")"))

(defrule comment
    := ()
    := string
    )

(defrule declaration-list
    := ()
    := ("(declare" declaration ")")
    )

(defrule declaration
    := ("(salience" number ")")
    )

(defrule left-hand-side
    := conditional-element-list
    )

(defrule right-hand-side
    := action-list
    )

(defrule action-list
    := ()
    := (action action-list)
    )

(defrule action
    := function-call
    )

(defrule conditional-element-list
    := ()

    := (conditional-element)
    
    := (conditional-element conditional-element-list)
    )

(defrule conditional-element
    := pattern-ce
    := assigned-pattern-ce
    := not-ce
    := test-ce
    )

(defrule pattern-ce
    := ("(" ordered-pattern-ce ")")

    := ("(" unordered-pattern-ce ")")
    )

(defrule assigned-pattern-ce
    := (variable-name "<-" pattern-ce)
    )

(defrule test-ce
    := ("(test" function-call ")")
    )

(defrule not-ce
    := not-form

    )

(defrule ordered-pattern-ce
    := name

    := (name constraint-list)

    )

(defrule unordered-pattern-ce
    := name
    
    := (name lhs-slot-list)

    )

(defrule lhs-slot-list
    := single-field-lhs-slot
    
    := (single-field-lhs-slot lhs-slot-list)

    )

(defrule single-field-lhs-slot
    := ("(" slot-name constraint-list ")")

    )

(defrule constraint-list
    := constraint

    := (constraint constraint-list)

    )

(defrule constraint
    := single-constraint
    := (single-constraint function-call)

    )

(defrule single-constraint
    := term
    := negated-term
    )

(defrule term
    := constant

    := single-field-variable

    )

(defrule negated-term
    := not-form
    )

(defrule not-form
    := ("(" "not" term ")")
    := ("(" "not" conditional-element ")")
    := ("(" "not" function-call ")")
    )

(defrule function-call
    := ("(" function-name ")")
    
    := ("(" function-name function-argument-list ")")

    )

(defrule function-argument-list
    := function-argument
    
    := (function-argument function-argument-list)

    )

(defrule function-argument
    := varname-or-value
    := function-call
    )

(defrule single-field-variable
    := variable-name
    := anonymous-variable-name
    )

(defrule varname-or-value
    := variable-name
    := constant
    )

(defrule variable-name
    := varname

    )

(defrule anonymous-variable-name
    := anonymous-varname

    )

(defrule slot-name
    := name
    )

(defrule function-name
    := name
    )

(defrule name
    := identifier
    )

(defrule constant
    := name
    := string
    := number
    )
